// Generated by godel-refreshable-plugin: do not edit.

package librarypkg

import refreshable "github.com/palantir/pkg/refreshable"

type RefreshableLibraryStruct interface {
	refreshable.Refreshable
	CurrentLibraryStruct() LibraryStruct
	MapLibraryStruct(func(LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStruct(func(LibraryStruct)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStruct struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStruct(in refreshable.Refreshable) RefreshingLibraryStruct {
	return RefreshingLibraryStruct{Refreshable: in}
}

func (r RefreshingLibraryStruct) CurrentLibraryStruct() LibraryStruct {
	return r.Current().(LibraryStruct)
}

func (r RefreshingLibraryStruct) MapLibraryStruct(mapFn func(LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) SubscribeToLibraryStruct(consumer func(LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStruct(func(i LibraryStruct) interface{} {
		return i.FieldA
	}))
}
