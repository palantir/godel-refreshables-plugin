// Generated by godel-refreshable-plugin: do not edit.

package test2

import (
	librarypkg "github.com/palantir/godel-refreshables-plugin/integration_test/testcode/test1/librarypkg"
	refreshable "github.com/palantir/pkg/refreshable"
)

type RefreshableOtherStruct interface {
	refreshable.Refreshable
	CurrentOtherStruct() OtherStruct
	MapOtherStruct(func(OtherStruct) interface{}) refreshable.Refreshable
	SubscribeToOtherStruct(func(OtherStruct)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() RefreshableLibraryStruct
}

type RefreshingOtherStruct struct {
	refreshable.Refreshable
}

func NewRefreshingOtherStruct(in refreshable.Refreshable) RefreshingOtherStruct {
	return RefreshingOtherStruct{Refreshable: in}
}

func (r RefreshingOtherStruct) CurrentOtherStruct() OtherStruct {
	return r.Current().(OtherStruct)
}

func (r RefreshingOtherStruct) MapOtherStruct(mapFn func(OtherStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OtherStruct))
	})
}

func (r RefreshingOtherStruct) SubscribeToOtherStruct(consumer func(OtherStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OtherStruct))
	})
}

func (r RefreshingOtherStruct) FieldA() refreshable.String {
	return refreshable.NewString(r.MapOtherStruct(func(i OtherStruct) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingOtherStruct) FieldB() RefreshableLibraryStruct {
	return NewRefreshingLibraryStruct(r.MapOtherStruct(func(i OtherStruct) interface{} {
		return i.FieldB
	}))
}

type RefreshableLibraryStruct interface {
	refreshable.Refreshable
	CurrentLibraryStruct() librarypkg.LibraryStruct
	MapLibraryStruct(func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStruct(func(librarypkg.LibraryStruct)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStruct struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStruct(in refreshable.Refreshable) RefreshingLibraryStruct {
	return RefreshingLibraryStruct{Refreshable: in}
}

func (r RefreshingLibraryStruct) CurrentLibraryStruct() librarypkg.LibraryStruct {
	return r.Current().(librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStruct) MapLibraryStruct(mapFn func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) SubscribeToLibraryStruct(consumer func(librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStruct(func(i librarypkg.LibraryStruct) interface{} {
		return i.FieldA
	}))
}
