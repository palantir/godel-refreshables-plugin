// Generated by godel-refreshable-plugin: do not edit.

package test1

import (
	"time"

	librarypkg "github.com/palantir/godel-refreshables-plugin/integration_test/testcode/test1/librarypkg"
	refreshable "github.com/palantir/pkg/refreshable"
)

type RefreshableOtherStruct interface {
	refreshable.Refreshable
	CurrentOtherStruct() OtherStruct
	MapOtherStruct(func(OtherStruct) interface{}) refreshable.Refreshable
	SubscribeToOtherStruct(func(OtherStruct)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() RefreshableInnerStruct
}

type RefreshingOtherStruct struct {
	refreshable.Refreshable
}

func NewRefreshingOtherStruct(in refreshable.Refreshable) RefreshingOtherStruct {
	return RefreshingOtherStruct{Refreshable: in}
}

func (r RefreshingOtherStruct) CurrentOtherStruct() OtherStruct {
	return r.Current().(OtherStruct)
}

func (r RefreshingOtherStruct) MapOtherStruct(mapFn func(OtherStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OtherStruct))
	})
}

func (r RefreshingOtherStruct) SubscribeToOtherStruct(consumer func(OtherStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OtherStruct))
	})
}

func (r RefreshingOtherStruct) FieldA() refreshable.String {
	return refreshable.NewString(r.MapOtherStruct(func(i OtherStruct) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingOtherStruct) FieldB() RefreshableInnerStruct {
	return NewRefreshingInnerStruct(r.MapOtherStruct(func(i OtherStruct) interface{} {
		return i.FieldB
	}))
}

type RefreshableInnerStruct interface {
	refreshable.Refreshable
	CurrentInnerStruct() InnerStruct
	MapInnerStruct(func(InnerStruct) interface{}) refreshable.Refreshable
	SubscribeToInnerStruct(func(InnerStruct)) (unsubscribe func())

	InnerFieldA() refreshable.Int
	InnerFieldB() refreshable.Duration
}

type RefreshingInnerStruct struct {
	refreshable.Refreshable
}

func NewRefreshingInnerStruct(in refreshable.Refreshable) RefreshingInnerStruct {
	return RefreshingInnerStruct{Refreshable: in}
}

func (r RefreshingInnerStruct) CurrentInnerStruct() InnerStruct {
	return r.Current().(InnerStruct)
}

func (r RefreshingInnerStruct) MapInnerStruct(mapFn func(InnerStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(InnerStruct))
	})
}

func (r RefreshingInnerStruct) SubscribeToInnerStruct(consumer func(InnerStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(InnerStruct))
	})
}

func (r RefreshingInnerStruct) InnerFieldA() refreshable.Int {
	return refreshable.NewInt(r.MapInnerStruct(func(i InnerStruct) interface{} {
		return i.InnerFieldA
	}))
}

func (r RefreshingInnerStruct) InnerFieldB() refreshable.Duration {
	return refreshable.NewDuration(r.MapInnerStruct(func(i InnerStruct) interface{} {
		return i.InnerFieldB
	}))
}

type RefreshableSuperStruct interface {
	refreshable.Refreshable
	CurrentSuperStruct() SuperStruct
	MapSuperStruct(func(SuperStruct) interface{}) refreshable.Refreshable
	SubscribeToSuperStruct(func(SuperStruct)) (unsubscribe func())

	String() refreshable.String
	OptionalString() refreshable.StringPtr
	SliceString() refreshable.StringSlice
	ArrayString() RefreshableStringArray
	StringString() RefreshableStringToString
	StringAlias() RefreshableStringAlias
	OptionalStringAlias() RefreshableOptionalStringAlias
	DoubleOptionalStringAlias() RefreshableOptionalStringAliasPtr
	Int() refreshable.Int
	OptionalInt() refreshable.IntPtr
	SliceInt() RefreshableIntSlice
	ArrayInt() RefreshableIntArray
	IntInt() RefreshableIntToInt
	IntAlias() RefreshableIntAlias
	OptionalIntAlias() RefreshableOptionalIntAlias
	DoubleOptionalIntAlias() RefreshableOptionalIntAliasPtr
	Duration() refreshable.Duration
	OptionalDuration() refreshable.DurationPtr
	SliceDuration() RefreshableDurationSlice
	ArrayDuration() RefreshableDurationArray
	DurationDuration() RefreshableDurationToDuration
	DurationAlias() RefreshableDurationAlias
	OptionalDurationAlias() RefreshableOptionalDurationAlias
	DoubleOptionalDurationAlias() RefreshableOptionalDurationAliasPtr
	Int64() refreshable.Int64
	Int64Ptr() refreshable.Int64Ptr
	Float64() refreshable.Float64
	Float64Ptr() refreshable.Float64Ptr
	NestedStruct() RefreshableNestedStruct
	NamedNestedStruct() RefreshableNestedStruct
	OptionalNestedStruct() RefreshableNestedStructPtr
	SliceNestedStruct() RefreshableNestedStructSlice
	ArrayNestedStruct() RefreshableNestedStructArray
	NestedStructNestedStruct() RefreshableNestedStructToNestedStruct
	NestedStructAlias() RefreshableNestedStructAlias
	OptionalNestedStructAlias() RefreshableOptionalNestedStructAlias
	LibraryStruct() RefreshableLibraryStruct
	NamedLibraryStruct() RefreshableLibraryStruct
	OptionalLibraryStruct() RefreshableLibraryStructPtr
	SliceLibraryStruct() RefreshableLibraryStructSlice
	ArrayLibraryStruct() RefreshableLibraryStructArray
	LibraryStructLibraryStruct() RefreshableLibraryStructToLibraryStruct
	LibraryStructAlias() RefreshableLibraryStructAlias
	OptionalLibraryStructAlias() RefreshableOptionalLibraryStructAlias
}

type RefreshingSuperStruct struct {
	refreshable.Refreshable
}

func NewRefreshingSuperStruct(in refreshable.Refreshable) RefreshingSuperStruct {
	return RefreshingSuperStruct{Refreshable: in}
}

func (r RefreshingSuperStruct) CurrentSuperStruct() SuperStruct {
	return r.Current().(SuperStruct)
}

func (r RefreshingSuperStruct) MapSuperStruct(mapFn func(SuperStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(SuperStruct))
	})
}

func (r RefreshingSuperStruct) SubscribeToSuperStruct(consumer func(SuperStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(SuperStruct))
	})
}

func (r RefreshingSuperStruct) String() refreshable.String {
	return refreshable.NewString(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.String
	}))
}

func (r RefreshingSuperStruct) OptionalString() refreshable.StringPtr {
	return refreshable.NewStringPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalString
	}))
}

func (r RefreshingSuperStruct) SliceString() refreshable.StringSlice {
	return refreshable.NewStringSlice(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.SliceString
	}))
}

func (r RefreshingSuperStruct) ArrayString() RefreshableStringArray {
	return NewRefreshingStringArray(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.ArrayString
	}))
}

func (r RefreshingSuperStruct) StringString() RefreshableStringToString {
	return NewRefreshingStringToString(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.StringString
	}))
}

func (r RefreshingSuperStruct) StringAlias() RefreshableStringAlias {
	return NewRefreshingStringAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.StringAlias
	}))
}

func (r RefreshingSuperStruct) OptionalStringAlias() RefreshableOptionalStringAlias {
	return NewRefreshingOptionalStringAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalStringAlias
	}))
}

func (r RefreshingSuperStruct) DoubleOptionalStringAlias() RefreshableOptionalStringAliasPtr {
	return NewRefreshingOptionalStringAliasPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.DoubleOptionalStringAlias
	}))
}

func (r RefreshingSuperStruct) Int() refreshable.Int {
	return refreshable.NewInt(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Int
	}))
}

func (r RefreshingSuperStruct) OptionalInt() refreshable.IntPtr {
	return refreshable.NewIntPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalInt
	}))
}

func (r RefreshingSuperStruct) SliceInt() RefreshableIntSlice {
	return NewRefreshingIntSlice(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.SliceInt
	}))
}

func (r RefreshingSuperStruct) ArrayInt() RefreshableIntArray {
	return NewRefreshingIntArray(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.ArrayInt
	}))
}

func (r RefreshingSuperStruct) IntInt() RefreshableIntToInt {
	return NewRefreshingIntToInt(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.IntInt
	}))
}

func (r RefreshingSuperStruct) IntAlias() RefreshableIntAlias {
	return NewRefreshingIntAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.IntAlias
	}))
}

func (r RefreshingSuperStruct) OptionalIntAlias() RefreshableOptionalIntAlias {
	return NewRefreshingOptionalIntAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalIntAlias
	}))
}

func (r RefreshingSuperStruct) DoubleOptionalIntAlias() RefreshableOptionalIntAliasPtr {
	return NewRefreshingOptionalIntAliasPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.DoubleOptionalIntAlias
	}))
}

func (r RefreshingSuperStruct) Duration() refreshable.Duration {
	return refreshable.NewDuration(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Duration
	}))
}

func (r RefreshingSuperStruct) OptionalDuration() refreshable.DurationPtr {
	return refreshable.NewDurationPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalDuration
	}))
}

func (r RefreshingSuperStruct) SliceDuration() RefreshableDurationSlice {
	return NewRefreshingDurationSlice(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.SliceDuration
	}))
}

func (r RefreshingSuperStruct) ArrayDuration() RefreshableDurationArray {
	return NewRefreshingDurationArray(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.ArrayDuration
	}))
}

func (r RefreshingSuperStruct) DurationDuration() RefreshableDurationToDuration {
	return NewRefreshingDurationToDuration(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.DurationDuration
	}))
}

func (r RefreshingSuperStruct) DurationAlias() RefreshableDurationAlias {
	return NewRefreshingDurationAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.DurationAlias
	}))
}

func (r RefreshingSuperStruct) OptionalDurationAlias() RefreshableOptionalDurationAlias {
	return NewRefreshingOptionalDurationAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalDurationAlias
	}))
}

func (r RefreshingSuperStruct) DoubleOptionalDurationAlias() RefreshableOptionalDurationAliasPtr {
	return NewRefreshingOptionalDurationAliasPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.DoubleOptionalDurationAlias
	}))
}

func (r RefreshingSuperStruct) Int64() refreshable.Int64 {
	return refreshable.NewInt64(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Int64
	}))
}

func (r RefreshingSuperStruct) Int64Ptr() refreshable.Int64Ptr {
	return refreshable.NewInt64Ptr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Int64Ptr
	}))
}

func (r RefreshingSuperStruct) Float64() refreshable.Float64 {
	return refreshable.NewFloat64(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Float64
	}))
}

func (r RefreshingSuperStruct) Float64Ptr() refreshable.Float64Ptr {
	return refreshable.NewFloat64Ptr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.Float64Ptr
	}))
}

func (r RefreshingSuperStruct) NestedStruct() RefreshableNestedStruct {
	return NewRefreshingNestedStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.NestedStruct
	}))
}

func (r RefreshingSuperStruct) NamedNestedStruct() RefreshableNestedStruct {
	return NewRefreshingNestedStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.NamedNestedStruct
	}))
}

func (r RefreshingSuperStruct) OptionalNestedStruct() RefreshableNestedStructPtr {
	return NewRefreshingNestedStructPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalNestedStruct
	}))
}

func (r RefreshingSuperStruct) SliceNestedStruct() RefreshableNestedStructSlice {
	return NewRefreshingNestedStructSlice(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.SliceNestedStruct
	}))
}

func (r RefreshingSuperStruct) ArrayNestedStruct() RefreshableNestedStructArray {
	return NewRefreshingNestedStructArray(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.ArrayNestedStruct
	}))
}

func (r RefreshingSuperStruct) NestedStructNestedStruct() RefreshableNestedStructToNestedStruct {
	return NewRefreshingNestedStructToNestedStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.NestedStructNestedStruct
	}))
}

func (r RefreshingSuperStruct) NestedStructAlias() RefreshableNestedStructAlias {
	return NewRefreshingNestedStructAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.NestedStructAlias
	}))
}

func (r RefreshingSuperStruct) OptionalNestedStructAlias() RefreshableOptionalNestedStructAlias {
	return NewRefreshingOptionalNestedStructAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalNestedStructAlias
	}))
}

func (r RefreshingSuperStruct) LibraryStruct() RefreshableLibraryStruct {
	return NewRefreshingLibraryStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.LibraryStruct
	}))
}

func (r RefreshingSuperStruct) NamedLibraryStruct() RefreshableLibraryStruct {
	return NewRefreshingLibraryStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.NamedLibraryStruct
	}))
}

func (r RefreshingSuperStruct) OptionalLibraryStruct() RefreshableLibraryStructPtr {
	return NewRefreshingLibraryStructPtr(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalLibraryStruct
	}))
}

func (r RefreshingSuperStruct) SliceLibraryStruct() RefreshableLibraryStructSlice {
	return NewRefreshingLibraryStructSlice(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.SliceLibraryStruct
	}))
}

func (r RefreshingSuperStruct) ArrayLibraryStruct() RefreshableLibraryStructArray {
	return NewRefreshingLibraryStructArray(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.ArrayLibraryStruct
	}))
}

func (r RefreshingSuperStruct) LibraryStructLibraryStruct() RefreshableLibraryStructToLibraryStruct {
	return NewRefreshingLibraryStructToLibraryStruct(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.LibraryStructLibraryStruct
	}))
}

func (r RefreshingSuperStruct) LibraryStructAlias() RefreshableLibraryStructAlias {
	return NewRefreshingLibraryStructAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.LibraryStructAlias
	}))
}

func (r RefreshingSuperStruct) OptionalLibraryStructAlias() RefreshableOptionalLibraryStructAlias {
	return NewRefreshingOptionalLibraryStructAlias(r.MapSuperStruct(func(i SuperStruct) interface{} {
		return i.OptionalLibraryStructAlias
	}))
}

type RefreshableStringArray interface {
	refreshable.Refreshable
	CurrentStringArray() string
	MapStringArray(func(string) interface{}) refreshable.Refreshable
	SubscribeToStringArray(func(string)) (unsubscribe func())
}

type RefreshingStringArray struct {
	refreshable.Refreshable
}

func NewRefreshingStringArray(in refreshable.Refreshable) RefreshingStringArray {
	return RefreshingStringArray{Refreshable: in}
}

func (r RefreshingStringArray) CurrentStringArray() string {
	return r.Current().(string)
}

func (r RefreshingStringArray) MapStringArray(mapFn func(string) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(string))
	})
}

func (r RefreshingStringArray) SubscribeToStringArray(consumer func(string)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(string))
	})
}

type RefreshableStringToString interface {
	refreshable.Refreshable
	CurrentStringToString() map[string]string
	MapStringToString(func(map[string]string) interface{}) refreshable.Refreshable
	SubscribeToStringToString(func(map[string]string)) (unsubscribe func())
}

type RefreshingStringToString struct {
	refreshable.Refreshable
}

func NewRefreshingStringToString(in refreshable.Refreshable) RefreshingStringToString {
	return RefreshingStringToString{Refreshable: in}
}

func (r RefreshingStringToString) CurrentStringToString() map[string]string {
	return r.Current().(map[string]string)
}

func (r RefreshingStringToString) MapStringToString(mapFn func(map[string]string) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(map[string]string))
	})
}

func (r RefreshingStringToString) SubscribeToStringToString(consumer func(map[string]string)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(map[string]string))
	})
}

type RefreshableStringAlias interface {
	refreshable.Refreshable
	CurrentStringAlias() StringAlias
	MapStringAlias(func(StringAlias) interface{}) refreshable.Refreshable
	SubscribeToStringAlias(func(StringAlias)) (unsubscribe func())
}

type RefreshingStringAlias struct {
	refreshable.Refreshable
}

func NewRefreshingStringAlias(in refreshable.Refreshable) RefreshingStringAlias {
	return RefreshingStringAlias{Refreshable: in}
}

func (r RefreshingStringAlias) CurrentStringAlias() StringAlias {
	return r.Current().(StringAlias)
}

func (r RefreshingStringAlias) MapStringAlias(mapFn func(StringAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(StringAlias))
	})
}

func (r RefreshingStringAlias) SubscribeToStringAlias(consumer func(StringAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(StringAlias))
	})
}

type RefreshableOptionalStringAlias interface {
	refreshable.Refreshable
	CurrentOptionalStringAlias() OptionalStringAlias
	MapOptionalStringAlias(func(OptionalStringAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalStringAlias(func(OptionalStringAlias)) (unsubscribe func())
}

type RefreshingOptionalStringAlias struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalStringAlias(in refreshable.Refreshable) RefreshingOptionalStringAlias {
	return RefreshingOptionalStringAlias{Refreshable: in}
}

func (r RefreshingOptionalStringAlias) CurrentOptionalStringAlias() OptionalStringAlias {
	return r.Current().(OptionalStringAlias)
}

func (r RefreshingOptionalStringAlias) MapOptionalStringAlias(mapFn func(OptionalStringAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OptionalStringAlias))
	})
}

func (r RefreshingOptionalStringAlias) SubscribeToOptionalStringAlias(consumer func(OptionalStringAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OptionalStringAlias))
	})
}

type RefreshableStringAliasPtr interface {
	refreshable.Refreshable
	CurrentStringAliasPtr() *StringAlias
	MapStringAliasPtr(func(*StringAlias) interface{}) refreshable.Refreshable
	SubscribeToStringAliasPtr(func(*StringAlias)) (unsubscribe func())
}

type RefreshingStringAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingStringAliasPtr(in refreshable.Refreshable) RefreshingStringAliasPtr {
	return RefreshingStringAliasPtr{Refreshable: in}
}

func (r RefreshingStringAliasPtr) CurrentStringAliasPtr() *StringAlias {
	return r.Current().(*StringAlias)
}

func (r RefreshingStringAliasPtr) MapStringAliasPtr(mapFn func(*StringAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*StringAlias))
	})
}

func (r RefreshingStringAliasPtr) SubscribeToStringAliasPtr(consumer func(*StringAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*StringAlias))
	})
}

type RefreshableOptionalStringAliasPtr interface {
	refreshable.Refreshable
	CurrentOptionalStringAliasPtr() *OptionalStringAlias
	MapOptionalStringAliasPtr(func(*OptionalStringAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalStringAliasPtr(func(*OptionalStringAlias)) (unsubscribe func())
}

type RefreshingOptionalStringAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalStringAliasPtr(in refreshable.Refreshable) RefreshingOptionalStringAliasPtr {
	return RefreshingOptionalStringAliasPtr{Refreshable: in}
}

func (r RefreshingOptionalStringAliasPtr) CurrentOptionalStringAliasPtr() *OptionalStringAlias {
	return r.Current().(*OptionalStringAlias)
}

func (r RefreshingOptionalStringAliasPtr) MapOptionalStringAliasPtr(mapFn func(*OptionalStringAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*OptionalStringAlias))
	})
}

func (r RefreshingOptionalStringAliasPtr) SubscribeToOptionalStringAliasPtr(consumer func(*OptionalStringAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*OptionalStringAlias))
	})
}

type RefreshableIntSlice interface {
	refreshable.Refreshable
	CurrentIntSlice() []int
	MapIntSlice(func([]int) interface{}) refreshable.Refreshable
	SubscribeToIntSlice(func([]int)) (unsubscribe func())
}

type RefreshingIntSlice struct {
	refreshable.Refreshable
}

func NewRefreshingIntSlice(in refreshable.Refreshable) RefreshingIntSlice {
	return RefreshingIntSlice{Refreshable: in}
}

func (r RefreshingIntSlice) CurrentIntSlice() []int {
	return r.Current().([]int)
}

func (r RefreshingIntSlice) MapIntSlice(mapFn func([]int) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.([]int))
	})
}

func (r RefreshingIntSlice) SubscribeToIntSlice(consumer func([]int)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.([]int))
	})
}

type RefreshableIntArray interface {
	refreshable.Refreshable
	CurrentIntArray() int
	MapIntArray(func(int) interface{}) refreshable.Refreshable
	SubscribeToIntArray(func(int)) (unsubscribe func())
}

type RefreshingIntArray struct {
	refreshable.Refreshable
}

func NewRefreshingIntArray(in refreshable.Refreshable) RefreshingIntArray {
	return RefreshingIntArray{Refreshable: in}
}

func (r RefreshingIntArray) CurrentIntArray() int {
	return r.Current().(int)
}

func (r RefreshingIntArray) MapIntArray(mapFn func(int) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(int))
	})
}

func (r RefreshingIntArray) SubscribeToIntArray(consumer func(int)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(int))
	})
}

type RefreshableIntToInt interface {
	refreshable.Refreshable
	CurrentIntToInt() map[int]int
	MapIntToInt(func(map[int]int) interface{}) refreshable.Refreshable
	SubscribeToIntToInt(func(map[int]int)) (unsubscribe func())
}

type RefreshingIntToInt struct {
	refreshable.Refreshable
}

func NewRefreshingIntToInt(in refreshable.Refreshable) RefreshingIntToInt {
	return RefreshingIntToInt{Refreshable: in}
}

func (r RefreshingIntToInt) CurrentIntToInt() map[int]int {
	return r.Current().(map[int]int)
}

func (r RefreshingIntToInt) MapIntToInt(mapFn func(map[int]int) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(map[int]int))
	})
}

func (r RefreshingIntToInt) SubscribeToIntToInt(consumer func(map[int]int)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(map[int]int))
	})
}

type RefreshableIntAlias interface {
	refreshable.Refreshable
	CurrentIntAlias() IntAlias
	MapIntAlias(func(IntAlias) interface{}) refreshable.Refreshable
	SubscribeToIntAlias(func(IntAlias)) (unsubscribe func())
}

type RefreshingIntAlias struct {
	refreshable.Refreshable
}

func NewRefreshingIntAlias(in refreshable.Refreshable) RefreshingIntAlias {
	return RefreshingIntAlias{Refreshable: in}
}

func (r RefreshingIntAlias) CurrentIntAlias() IntAlias {
	return r.Current().(IntAlias)
}

func (r RefreshingIntAlias) MapIntAlias(mapFn func(IntAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(IntAlias))
	})
}

func (r RefreshingIntAlias) SubscribeToIntAlias(consumer func(IntAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(IntAlias))
	})
}

type RefreshableOptionalIntAlias interface {
	refreshable.Refreshable
	CurrentOptionalIntAlias() OptionalIntAlias
	MapOptionalIntAlias(func(OptionalIntAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalIntAlias(func(OptionalIntAlias)) (unsubscribe func())
}

type RefreshingOptionalIntAlias struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalIntAlias(in refreshable.Refreshable) RefreshingOptionalIntAlias {
	return RefreshingOptionalIntAlias{Refreshable: in}
}

func (r RefreshingOptionalIntAlias) CurrentOptionalIntAlias() OptionalIntAlias {
	return r.Current().(OptionalIntAlias)
}

func (r RefreshingOptionalIntAlias) MapOptionalIntAlias(mapFn func(OptionalIntAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OptionalIntAlias))
	})
}

func (r RefreshingOptionalIntAlias) SubscribeToOptionalIntAlias(consumer func(OptionalIntAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OptionalIntAlias))
	})
}

type RefreshableIntAliasPtr interface {
	refreshable.Refreshable
	CurrentIntAliasPtr() *IntAlias
	MapIntAliasPtr(func(*IntAlias) interface{}) refreshable.Refreshable
	SubscribeToIntAliasPtr(func(*IntAlias)) (unsubscribe func())
}

type RefreshingIntAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingIntAliasPtr(in refreshable.Refreshable) RefreshingIntAliasPtr {
	return RefreshingIntAliasPtr{Refreshable: in}
}

func (r RefreshingIntAliasPtr) CurrentIntAliasPtr() *IntAlias {
	return r.Current().(*IntAlias)
}

func (r RefreshingIntAliasPtr) MapIntAliasPtr(mapFn func(*IntAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*IntAlias))
	})
}

func (r RefreshingIntAliasPtr) SubscribeToIntAliasPtr(consumer func(*IntAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*IntAlias))
	})
}

type RefreshableOptionalIntAliasPtr interface {
	refreshable.Refreshable
	CurrentOptionalIntAliasPtr() *OptionalIntAlias
	MapOptionalIntAliasPtr(func(*OptionalIntAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalIntAliasPtr(func(*OptionalIntAlias)) (unsubscribe func())
}

type RefreshingOptionalIntAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalIntAliasPtr(in refreshable.Refreshable) RefreshingOptionalIntAliasPtr {
	return RefreshingOptionalIntAliasPtr{Refreshable: in}
}

func (r RefreshingOptionalIntAliasPtr) CurrentOptionalIntAliasPtr() *OptionalIntAlias {
	return r.Current().(*OptionalIntAlias)
}

func (r RefreshingOptionalIntAliasPtr) MapOptionalIntAliasPtr(mapFn func(*OptionalIntAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*OptionalIntAlias))
	})
}

func (r RefreshingOptionalIntAliasPtr) SubscribeToOptionalIntAliasPtr(consumer func(*OptionalIntAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*OptionalIntAlias))
	})
}

type RefreshableDurationSlice interface {
	refreshable.Refreshable
	CurrentDurationSlice() []time.Duration
	MapDurationSlice(func([]time.Duration) interface{}) refreshable.Refreshable
	SubscribeToDurationSlice(func([]time.Duration)) (unsubscribe func())
}

type RefreshingDurationSlice struct {
	refreshable.Refreshable
}

func NewRefreshingDurationSlice(in refreshable.Refreshable) RefreshingDurationSlice {
	return RefreshingDurationSlice{Refreshable: in}
}

func (r RefreshingDurationSlice) CurrentDurationSlice() []time.Duration {
	return r.Current().([]time.Duration)
}

func (r RefreshingDurationSlice) MapDurationSlice(mapFn func([]time.Duration) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.([]time.Duration))
	})
}

func (r RefreshingDurationSlice) SubscribeToDurationSlice(consumer func([]time.Duration)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.([]time.Duration))
	})
}

type RefreshableDurationArray interface {
	refreshable.Refreshable
	CurrentDurationArray() time.Duration
	MapDurationArray(func(time.Duration) interface{}) refreshable.Refreshable
	SubscribeToDurationArray(func(time.Duration)) (unsubscribe func())
}

type RefreshingDurationArray struct {
	refreshable.Refreshable
}

func NewRefreshingDurationArray(in refreshable.Refreshable) RefreshingDurationArray {
	return RefreshingDurationArray{Refreshable: in}
}

func (r RefreshingDurationArray) CurrentDurationArray() time.Duration {
	return r.Current().(time.Duration)
}

func (r RefreshingDurationArray) MapDurationArray(mapFn func(time.Duration) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(time.Duration))
	})
}

func (r RefreshingDurationArray) SubscribeToDurationArray(consumer func(time.Duration)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(time.Duration))
	})
}

type RefreshableDurationToDuration interface {
	refreshable.Refreshable
	CurrentDurationToDuration() map[time.Duration]time.Duration
	MapDurationToDuration(func(map[time.Duration]time.Duration) interface{}) refreshable.Refreshable
	SubscribeToDurationToDuration(func(map[time.Duration]time.Duration)) (unsubscribe func())
}

type RefreshingDurationToDuration struct {
	refreshable.Refreshable
}

func NewRefreshingDurationToDuration(in refreshable.Refreshable) RefreshingDurationToDuration {
	return RefreshingDurationToDuration{Refreshable: in}
}

func (r RefreshingDurationToDuration) CurrentDurationToDuration() map[time.Duration]time.Duration {
	return r.Current().(map[time.Duration]time.Duration)
}

func (r RefreshingDurationToDuration) MapDurationToDuration(mapFn func(map[time.Duration]time.Duration) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(map[time.Duration]time.Duration))
	})
}

func (r RefreshingDurationToDuration) SubscribeToDurationToDuration(consumer func(map[time.Duration]time.Duration)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(map[time.Duration]time.Duration))
	})
}

type RefreshableDurationAlias interface {
	refreshable.Refreshable
	CurrentDurationAlias() DurationAlias
	MapDurationAlias(func(DurationAlias) interface{}) refreshable.Refreshable
	SubscribeToDurationAlias(func(DurationAlias)) (unsubscribe func())
}

type RefreshingDurationAlias struct {
	refreshable.Refreshable
}

func NewRefreshingDurationAlias(in refreshable.Refreshable) RefreshingDurationAlias {
	return RefreshingDurationAlias{Refreshable: in}
}

func (r RefreshingDurationAlias) CurrentDurationAlias() DurationAlias {
	return r.Current().(DurationAlias)
}

func (r RefreshingDurationAlias) MapDurationAlias(mapFn func(DurationAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(DurationAlias))
	})
}

func (r RefreshingDurationAlias) SubscribeToDurationAlias(consumer func(DurationAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(DurationAlias))
	})
}

type RefreshableOptionalDurationAlias interface {
	refreshable.Refreshable
	CurrentOptionalDurationAlias() OptionalDurationAlias
	MapOptionalDurationAlias(func(OptionalDurationAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalDurationAlias(func(OptionalDurationAlias)) (unsubscribe func())
}

type RefreshingOptionalDurationAlias struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalDurationAlias(in refreshable.Refreshable) RefreshingOptionalDurationAlias {
	return RefreshingOptionalDurationAlias{Refreshable: in}
}

func (r RefreshingOptionalDurationAlias) CurrentOptionalDurationAlias() OptionalDurationAlias {
	return r.Current().(OptionalDurationAlias)
}

func (r RefreshingOptionalDurationAlias) MapOptionalDurationAlias(mapFn func(OptionalDurationAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OptionalDurationAlias))
	})
}

func (r RefreshingOptionalDurationAlias) SubscribeToOptionalDurationAlias(consumer func(OptionalDurationAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OptionalDurationAlias))
	})
}

type RefreshableDurationAliasPtr interface {
	refreshable.Refreshable
	CurrentDurationAliasPtr() *DurationAlias
	MapDurationAliasPtr(func(*DurationAlias) interface{}) refreshable.Refreshable
	SubscribeToDurationAliasPtr(func(*DurationAlias)) (unsubscribe func())
}

type RefreshingDurationAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingDurationAliasPtr(in refreshable.Refreshable) RefreshingDurationAliasPtr {
	return RefreshingDurationAliasPtr{Refreshable: in}
}

func (r RefreshingDurationAliasPtr) CurrentDurationAliasPtr() *DurationAlias {
	return r.Current().(*DurationAlias)
}

func (r RefreshingDurationAliasPtr) MapDurationAliasPtr(mapFn func(*DurationAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*DurationAlias))
	})
}

func (r RefreshingDurationAliasPtr) SubscribeToDurationAliasPtr(consumer func(*DurationAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*DurationAlias))
	})
}

type RefreshableOptionalDurationAliasPtr interface {
	refreshable.Refreshable
	CurrentOptionalDurationAliasPtr() *OptionalDurationAlias
	MapOptionalDurationAliasPtr(func(*OptionalDurationAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalDurationAliasPtr(func(*OptionalDurationAlias)) (unsubscribe func())
}

type RefreshingOptionalDurationAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalDurationAliasPtr(in refreshable.Refreshable) RefreshingOptionalDurationAliasPtr {
	return RefreshingOptionalDurationAliasPtr{Refreshable: in}
}

func (r RefreshingOptionalDurationAliasPtr) CurrentOptionalDurationAliasPtr() *OptionalDurationAlias {
	return r.Current().(*OptionalDurationAlias)
}

func (r RefreshingOptionalDurationAliasPtr) MapOptionalDurationAliasPtr(mapFn func(*OptionalDurationAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*OptionalDurationAlias))
	})
}

func (r RefreshingOptionalDurationAliasPtr) SubscribeToOptionalDurationAliasPtr(consumer func(*OptionalDurationAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*OptionalDurationAlias))
	})
}

type RefreshableNestedStruct interface {
	refreshable.Refreshable
	CurrentNestedStruct() NestedStruct
	MapNestedStruct(func(NestedStruct) interface{}) refreshable.Refreshable
	SubscribeToNestedStruct(func(NestedStruct)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() refreshable.Int
}

type RefreshingNestedStruct struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStruct(in refreshable.Refreshable) RefreshingNestedStruct {
	return RefreshingNestedStruct{Refreshable: in}
}

func (r RefreshingNestedStruct) CurrentNestedStruct() NestedStruct {
	return r.Current().(NestedStruct)
}

func (r RefreshingNestedStruct) MapNestedStruct(mapFn func(NestedStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(NestedStruct))
	})
}

func (r RefreshingNestedStruct) SubscribeToNestedStruct(consumer func(NestedStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(NestedStruct))
	})
}

func (r RefreshingNestedStruct) FieldA() refreshable.String {
	return refreshable.NewString(r.MapNestedStruct(func(i NestedStruct) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingNestedStruct) FieldB() refreshable.Int {
	return refreshable.NewInt(r.MapNestedStruct(func(i NestedStruct) interface{} {
		return i.FieldB
	}))
}

type RefreshableNestedStructPtr interface {
	refreshable.Refreshable
	CurrentNestedStructPtr() *NestedStruct
	MapNestedStructPtr(func(*NestedStruct) interface{}) refreshable.Refreshable
	SubscribeToNestedStructPtr(func(*NestedStruct)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() refreshable.Int
}

type RefreshingNestedStructPtr struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructPtr(in refreshable.Refreshable) RefreshingNestedStructPtr {
	return RefreshingNestedStructPtr{Refreshable: in}
}

func (r RefreshingNestedStructPtr) CurrentNestedStructPtr() *NestedStruct {
	return r.Current().(*NestedStruct)
}

func (r RefreshingNestedStructPtr) MapNestedStructPtr(mapFn func(*NestedStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*NestedStruct))
	})
}

func (r RefreshingNestedStructPtr) SubscribeToNestedStructPtr(consumer func(*NestedStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*NestedStruct))
	})
}

func (r RefreshingNestedStructPtr) FieldA() refreshable.String {
	return refreshable.NewString(r.MapNestedStructPtr(func(i *NestedStruct) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingNestedStructPtr) FieldB() refreshable.Int {
	return refreshable.NewInt(r.MapNestedStructPtr(func(i *NestedStruct) interface{} {
		return i.FieldB
	}))
}

type RefreshableNestedStructSlice interface {
	refreshable.Refreshable
	CurrentNestedStructSlice() []NestedStruct
	MapNestedStructSlice(func([]NestedStruct) interface{}) refreshable.Refreshable
	SubscribeToNestedStructSlice(func([]NestedStruct)) (unsubscribe func())
}

type RefreshingNestedStructSlice struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructSlice(in refreshable.Refreshable) RefreshingNestedStructSlice {
	return RefreshingNestedStructSlice{Refreshable: in}
}

func (r RefreshingNestedStructSlice) CurrentNestedStructSlice() []NestedStruct {
	return r.Current().([]NestedStruct)
}

func (r RefreshingNestedStructSlice) MapNestedStructSlice(mapFn func([]NestedStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.([]NestedStruct))
	})
}

func (r RefreshingNestedStructSlice) SubscribeToNestedStructSlice(consumer func([]NestedStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.([]NestedStruct))
	})
}

type RefreshableNestedStructArray interface {
	refreshable.Refreshable
	CurrentNestedStructArray() NestedStruct
	MapNestedStructArray(func(NestedStruct) interface{}) refreshable.Refreshable
	SubscribeToNestedStructArray(func(NestedStruct)) (unsubscribe func())
}

type RefreshingNestedStructArray struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructArray(in refreshable.Refreshable) RefreshingNestedStructArray {
	return RefreshingNestedStructArray{Refreshable: in}
}

func (r RefreshingNestedStructArray) CurrentNestedStructArray() NestedStruct {
	return r.Current().(NestedStruct)
}

func (r RefreshingNestedStructArray) MapNestedStructArray(mapFn func(NestedStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(NestedStruct))
	})
}

func (r RefreshingNestedStructArray) SubscribeToNestedStructArray(consumer func(NestedStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(NestedStruct))
	})
}

type RefreshableNestedStructToNestedStruct interface {
	refreshable.Refreshable
	CurrentNestedStructToNestedStruct() map[NestedStruct]NestedStruct
	MapNestedStructToNestedStruct(func(map[NestedStruct]NestedStruct) interface{}) refreshable.Refreshable
	SubscribeToNestedStructToNestedStruct(func(map[NestedStruct]NestedStruct)) (unsubscribe func())
}

type RefreshingNestedStructToNestedStruct struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructToNestedStruct(in refreshable.Refreshable) RefreshingNestedStructToNestedStruct {
	return RefreshingNestedStructToNestedStruct{Refreshable: in}
}

func (r RefreshingNestedStructToNestedStruct) CurrentNestedStructToNestedStruct() map[NestedStruct]NestedStruct {
	return r.Current().(map[NestedStruct]NestedStruct)
}

func (r RefreshingNestedStructToNestedStruct) MapNestedStructToNestedStruct(mapFn func(map[NestedStruct]NestedStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(map[NestedStruct]NestedStruct))
	})
}

func (r RefreshingNestedStructToNestedStruct) SubscribeToNestedStructToNestedStruct(consumer func(map[NestedStruct]NestedStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(map[NestedStruct]NestedStruct))
	})
}

type RefreshableNestedStructAlias interface {
	refreshable.Refreshable
	CurrentNestedStructAlias() NestedStructAlias
	MapNestedStructAlias(func(NestedStructAlias) interface{}) refreshable.Refreshable
	SubscribeToNestedStructAlias(func(NestedStructAlias)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() refreshable.Int
}

type RefreshingNestedStructAlias struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructAlias(in refreshable.Refreshable) RefreshingNestedStructAlias {
	return RefreshingNestedStructAlias{Refreshable: in}
}

func (r RefreshingNestedStructAlias) CurrentNestedStructAlias() NestedStructAlias {
	return r.Current().(NestedStructAlias)
}

func (r RefreshingNestedStructAlias) MapNestedStructAlias(mapFn func(NestedStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(NestedStructAlias))
	})
}

func (r RefreshingNestedStructAlias) SubscribeToNestedStructAlias(consumer func(NestedStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(NestedStructAlias))
	})
}

func (r RefreshingNestedStructAlias) FieldA() refreshable.String {
	return refreshable.NewString(r.MapNestedStructAlias(func(i NestedStructAlias) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingNestedStructAlias) FieldB() refreshable.Int {
	return refreshable.NewInt(r.MapNestedStructAlias(func(i NestedStructAlias) interface{} {
		return i.FieldB
	}))
}

type RefreshableOptionalNestedStructAlias interface {
	refreshable.Refreshable
	CurrentOptionalNestedStructAlias() OptionalNestedStructAlias
	MapOptionalNestedStructAlias(func(OptionalNestedStructAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalNestedStructAlias(func(OptionalNestedStructAlias)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() refreshable.Int
}

type RefreshingOptionalNestedStructAlias struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalNestedStructAlias(in refreshable.Refreshable) RefreshingOptionalNestedStructAlias {
	return RefreshingOptionalNestedStructAlias{Refreshable: in}
}

func (r RefreshingOptionalNestedStructAlias) CurrentOptionalNestedStructAlias() OptionalNestedStructAlias {
	return r.Current().(OptionalNestedStructAlias)
}

func (r RefreshingOptionalNestedStructAlias) MapOptionalNestedStructAlias(mapFn func(OptionalNestedStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OptionalNestedStructAlias))
	})
}

func (r RefreshingOptionalNestedStructAlias) SubscribeToOptionalNestedStructAlias(consumer func(OptionalNestedStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OptionalNestedStructAlias))
	})
}

func (r RefreshingOptionalNestedStructAlias) FieldA() refreshable.String {
	return refreshable.NewString(r.MapOptionalNestedStructAlias(func(i OptionalNestedStructAlias) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingOptionalNestedStructAlias) FieldB() refreshable.Int {
	return refreshable.NewInt(r.MapOptionalNestedStructAlias(func(i OptionalNestedStructAlias) interface{} {
		return i.FieldB
	}))
}

type RefreshableNestedStructAliasPtr interface {
	refreshable.Refreshable
	CurrentNestedStructAliasPtr() *NestedStructAlias
	MapNestedStructAliasPtr(func(*NestedStructAlias) interface{}) refreshable.Refreshable
	SubscribeToNestedStructAliasPtr(func(*NestedStructAlias)) (unsubscribe func())

	FieldA() refreshable.String
	FieldB() refreshable.Int
}

type RefreshingNestedStructAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingNestedStructAliasPtr(in refreshable.Refreshable) RefreshingNestedStructAliasPtr {
	return RefreshingNestedStructAliasPtr{Refreshable: in}
}

func (r RefreshingNestedStructAliasPtr) CurrentNestedStructAliasPtr() *NestedStructAlias {
	return r.Current().(*NestedStructAlias)
}

func (r RefreshingNestedStructAliasPtr) MapNestedStructAliasPtr(mapFn func(*NestedStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*NestedStructAlias))
	})
}

func (r RefreshingNestedStructAliasPtr) SubscribeToNestedStructAliasPtr(consumer func(*NestedStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*NestedStructAlias))
	})
}

func (r RefreshingNestedStructAliasPtr) FieldA() refreshable.String {
	return refreshable.NewString(r.MapNestedStructAliasPtr(func(i *NestedStructAlias) interface{} {
		return i.FieldA
	}))
}

func (r RefreshingNestedStructAliasPtr) FieldB() refreshable.Int {
	return refreshable.NewInt(r.MapNestedStructAliasPtr(func(i *NestedStructAlias) interface{} {
		return i.FieldB
	}))
}

type RefreshableLibraryStruct interface {
	refreshable.Refreshable
	CurrentLibraryStruct() librarypkg.LibraryStruct
	MapLibraryStruct(func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStruct(func(librarypkg.LibraryStruct)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStruct struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStruct(in refreshable.Refreshable) RefreshingLibraryStruct {
	return RefreshingLibraryStruct{Refreshable: in}
}

func (r RefreshingLibraryStruct) CurrentLibraryStruct() librarypkg.LibraryStruct {
	return r.Current().(librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStruct) MapLibraryStruct(mapFn func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) SubscribeToLibraryStruct(consumer func(librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStruct) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStruct(func(i librarypkg.LibraryStruct) interface{} {
		return i.FieldA
	}))
}

type RefreshableLibraryStructPtr interface {
	refreshable.Refreshable
	CurrentLibraryStructPtr() *librarypkg.LibraryStruct
	MapLibraryStructPtr(func(*librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructPtr(func(*librarypkg.LibraryStruct)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStructPtr struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructPtr(in refreshable.Refreshable) RefreshingLibraryStructPtr {
	return RefreshingLibraryStructPtr{Refreshable: in}
}

func (r RefreshingLibraryStructPtr) CurrentLibraryStructPtr() *librarypkg.LibraryStruct {
	return r.Current().(*librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStructPtr) MapLibraryStructPtr(mapFn func(*librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStructPtr) SubscribeToLibraryStructPtr(consumer func(*librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStructPtr) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStructPtr(func(i *librarypkg.LibraryStruct) interface{} {
		return i.FieldA
	}))
}

type RefreshableLibraryStructSlice interface {
	refreshable.Refreshable
	CurrentLibraryStructSlice() []librarypkg.LibraryStruct
	MapLibraryStructSlice(func([]librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructSlice(func([]librarypkg.LibraryStruct)) (unsubscribe func())
}

type RefreshingLibraryStructSlice struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructSlice(in refreshable.Refreshable) RefreshingLibraryStructSlice {
	return RefreshingLibraryStructSlice{Refreshable: in}
}

func (r RefreshingLibraryStructSlice) CurrentLibraryStructSlice() []librarypkg.LibraryStruct {
	return r.Current().([]librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStructSlice) MapLibraryStructSlice(mapFn func([]librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.([]librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStructSlice) SubscribeToLibraryStructSlice(consumer func([]librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.([]librarypkg.LibraryStruct))
	})
}

type RefreshableLibraryStructArray interface {
	refreshable.Refreshable
	CurrentLibraryStructArray() librarypkg.LibraryStruct
	MapLibraryStructArray(func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructArray(func(librarypkg.LibraryStruct)) (unsubscribe func())
}

type RefreshingLibraryStructArray struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructArray(in refreshable.Refreshable) RefreshingLibraryStructArray {
	return RefreshingLibraryStructArray{Refreshable: in}
}

func (r RefreshingLibraryStructArray) CurrentLibraryStructArray() librarypkg.LibraryStruct {
	return r.Current().(librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStructArray) MapLibraryStructArray(mapFn func(librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStructArray) SubscribeToLibraryStructArray(consumer func(librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(librarypkg.LibraryStruct))
	})
}

type RefreshableLibraryStructToLibraryStruct interface {
	refreshable.Refreshable
	CurrentLibraryStructToLibraryStruct() map[librarypkg.LibraryStruct]librarypkg.LibraryStruct
	MapLibraryStructToLibraryStruct(func(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructToLibraryStruct(func(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct)) (unsubscribe func())
}

type RefreshingLibraryStructToLibraryStruct struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructToLibraryStruct(in refreshable.Refreshable) RefreshingLibraryStructToLibraryStruct {
	return RefreshingLibraryStructToLibraryStruct{Refreshable: in}
}

func (r RefreshingLibraryStructToLibraryStruct) CurrentLibraryStructToLibraryStruct() map[librarypkg.LibraryStruct]librarypkg.LibraryStruct {
	return r.Current().(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct)
}

func (r RefreshingLibraryStructToLibraryStruct) MapLibraryStructToLibraryStruct(mapFn func(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct))
	})
}

func (r RefreshingLibraryStructToLibraryStruct) SubscribeToLibraryStructToLibraryStruct(consumer func(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(map[librarypkg.LibraryStruct]librarypkg.LibraryStruct))
	})
}

type RefreshableLibraryStructAlias interface {
	refreshable.Refreshable
	CurrentLibraryStructAlias() LibraryStructAlias
	MapLibraryStructAlias(func(LibraryStructAlias) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructAlias(func(LibraryStructAlias)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStructAlias struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructAlias(in refreshable.Refreshable) RefreshingLibraryStructAlias {
	return RefreshingLibraryStructAlias{Refreshable: in}
}

func (r RefreshingLibraryStructAlias) CurrentLibraryStructAlias() LibraryStructAlias {
	return r.Current().(LibraryStructAlias)
}

func (r RefreshingLibraryStructAlias) MapLibraryStructAlias(mapFn func(LibraryStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(LibraryStructAlias))
	})
}

func (r RefreshingLibraryStructAlias) SubscribeToLibraryStructAlias(consumer func(LibraryStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(LibraryStructAlias))
	})
}

func (r RefreshingLibraryStructAlias) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStructAlias(func(i LibraryStructAlias) interface{} {
		return i.FieldA
	}))
}

type RefreshableOptionalLibraryStructAlias interface {
	refreshable.Refreshable
	CurrentOptionalLibraryStructAlias() OptionalLibraryStructAlias
	MapOptionalLibraryStructAlias(func(OptionalLibraryStructAlias) interface{}) refreshable.Refreshable
	SubscribeToOptionalLibraryStructAlias(func(OptionalLibraryStructAlias)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingOptionalLibraryStructAlias struct {
	refreshable.Refreshable
}

func NewRefreshingOptionalLibraryStructAlias(in refreshable.Refreshable) RefreshingOptionalLibraryStructAlias {
	return RefreshingOptionalLibraryStructAlias{Refreshable: in}
}

func (r RefreshingOptionalLibraryStructAlias) CurrentOptionalLibraryStructAlias() OptionalLibraryStructAlias {
	return r.Current().(OptionalLibraryStructAlias)
}

func (r RefreshingOptionalLibraryStructAlias) MapOptionalLibraryStructAlias(mapFn func(OptionalLibraryStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(OptionalLibraryStructAlias))
	})
}

func (r RefreshingOptionalLibraryStructAlias) SubscribeToOptionalLibraryStructAlias(consumer func(OptionalLibraryStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(OptionalLibraryStructAlias))
	})
}

func (r RefreshingOptionalLibraryStructAlias) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapOptionalLibraryStructAlias(func(i OptionalLibraryStructAlias) interface{} {
		return i.FieldA
	}))
}

type RefreshableLibraryStructAliasPtr interface {
	refreshable.Refreshable
	CurrentLibraryStructAliasPtr() *LibraryStructAlias
	MapLibraryStructAliasPtr(func(*LibraryStructAlias) interface{}) refreshable.Refreshable
	SubscribeToLibraryStructAliasPtr(func(*LibraryStructAlias)) (unsubscribe func())

	FieldA() refreshable.Int
}

type RefreshingLibraryStructAliasPtr struct {
	refreshable.Refreshable
}

func NewRefreshingLibraryStructAliasPtr(in refreshable.Refreshable) RefreshingLibraryStructAliasPtr {
	return RefreshingLibraryStructAliasPtr{Refreshable: in}
}

func (r RefreshingLibraryStructAliasPtr) CurrentLibraryStructAliasPtr() *LibraryStructAlias {
	return r.Current().(*LibraryStructAlias)
}

func (r RefreshingLibraryStructAliasPtr) MapLibraryStructAliasPtr(mapFn func(*LibraryStructAlias) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*LibraryStructAlias))
	})
}

func (r RefreshingLibraryStructAliasPtr) SubscribeToLibraryStructAliasPtr(consumer func(*LibraryStructAlias)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*LibraryStructAlias))
	})
}

func (r RefreshingLibraryStructAliasPtr) FieldA() refreshable.Int {
	return refreshable.NewInt(r.MapLibraryStructAliasPtr(func(i *LibraryStructAlias) interface{} {
		return i.FieldA
	}))
}
